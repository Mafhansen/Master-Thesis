'''
This file was adapted from the file "Neighborhood Identification.ipynb" available at 
https://github.com/nolanlab/NeighborhoodCoordination.
'''

import pandas as pd
import numpy as np
from sklearn.neighbors import NearestNeighbors
import time
import sys
import matplotlib.pyplot as plt
from sklearn.cluster import MiniBatchKMeans
from sklearn.mixture import GaussianMixture
import seaborn as sns
import scipy

def get_windows(job,n_neighbors):
    '''
    For each region and each individual cell in dataset, return the indices of the nearest neighbors.
    
    'job:  meta data containing the start time,index of region, region name, indices of region in original dataframe
    n_neighbors:  the number of neighbors to find for each cell
    '''
    start_time,idx,tissue_name,indices = job
    job_start = time.time()
    
    print ("Starting:", str(idx+1)+'/'+str(len(exps)),': ' + str(exps[idx]))

    tissue = tissue_group.get_group(tissue_name)
    to_fit = tissue.loc[indices][[X,Y]].values

    fit = NearestNeighbors(n_neighbors=n_neighbors).fit(tissue[[X,Y]].values)
    m = fit.kneighbors(to_fit)
    m = m[0], m[1]
    

    #sort_neighbors
    args = m[0].argsort(axis = 1)
    add = np.arange(m[1].shape[0])*m[1].shape[1]
    sorted_indices = m[1].flatten()[args+add[:,None]]

    neighbors = tissue.index.values[sorted_indices]
   
    end_time = time.time()
   
    print ("Finishing:", str(idx+1)+"/"+str(len(exps)),": "+ str(exps[idx]),end_time-job_start,end_time-start_time)
    return neighbors.astype(np.int32)

ks = [3,5,10] # k=5 means it collects 5 nearest neighbors for each center cell
path_to_data = "C:/Users/matti/Desktop/utag_7pcw_test.csv"
X = 'x'
Y = 'y'
reg = 'reg'
file_type = 'csv'

cluster_col = 'cluster'
keep_cols = [X,Y,reg,cluster_col]
save_path = ''

#read in data and do some quick data rearrangement
n_neighbors = max(ks)
assert (file_type=='csv' or file_type =='pickle') #

if file_type == 'pickle':
    cells = pd.read_pickle(path_to_data)
if file_type == 'csv':
    cells = pd.read_csv(path_to_data)

cells['reg'] = [1] * len(cells['ObjNo'])

cells = pd.concat([cells,pd.get_dummies(cells[cluster_col])],1)

sum_cols = cells[cluster_col].unique()
values = cells[sum_cols].values

#find windows for each cell in each tissue region
tissue_group = cells[[X,Y,reg]].groupby(reg)
exps = list(cells[reg].unique())
tissue_chunks = [(time.time(),exps.index(t),t,a) for t,indices in tissue_group.groups.items() for a in np.array_split(indices,1)] 
tissues = [get_windows(job,n_neighbors) for job in tissue_chunks]

#for each cell and its nearest neighbors, reshape and count the number of each cell type in those neighbors.
out_dict = {}
for k in ks:
    for neighbors,job in zip(tissues,tissue_chunks):

        chunk = np.arange(len(neighbors))#indices
        tissue_name = job[2]
        indices = job[3]
        window = values[neighbors[chunk,:k].flatten()].reshape(len(chunk),k,len(sum_cols)).sum(axis = 1)
        out_dict[(tissue_name,k)] = (window.astype(np.float16),indices)

#concatenate the summed windows and combine into one dataframe for each window size tested.
windows = {}
for k in ks:
   
    window = pd.concat([pd.DataFrame(out_dict[(exp,k)][0],index = out_dict[(exp,k)][1].astype(int),columns = sum_cols) for exp in exps],0)
    window = window.loc[cells.index.values]
    window = pd.concat([cells[keep_cols],window],1)
    windows[k] = window

neighborhood_name = "Neighborhoods"
k_centroids = {}
windows2 = windows[5]
windows2[cluster_col] = cells[cluster_col]

## Calculate BIC scores for 1 to 51 components for specified window size.
bic = []
n_components_range = range(1,51)
for n_components in n_components_range:
    for i in range(3): # Repeat 3 times for each iteration.
        print(n_components)
        # Fit a Gaussian mixture with EM
        GMM = GaussianMixture(n_components=n_components, covariance_type="full")
        GMM.fit(windows2[sum_cols].values)
        bic.append(GMM.bic(windows2[sum_cols].values))

# Calculated BIC scores for both heart ages for window sizes 3, 5, and 10.
bic_7pcw_3 = [257427.16822933685, 257427.16822933685, 257427.16822933685, -719821.8150385193, -640697.2844097278, -714280.8051330777, -1089926.7420877775, -1338182.940546441, -1158833.0795447244, -2066958.9003781902, -1563510.6390467575, -2017633.345454082, -2111635.6239338303, -1772392.0916880607, -2227602.9607494683, -2482876.7585875806, -2295882.3833201816, -2335491.897743463, -2507314.7376350947, -2474226.389877414, -2568837.847867099, -2644608.2427392774, -2495371.4769241274, -2296218.383423859, -2664273.1935036224, -2627027.8732953924, -2585946.520490449, -2764475.299873024, -2736106.8874065336, -2698816.56962164, -2714842.1023492087, -2669669.1595913675, -2799757.2460409747, -2726348.8086681725, -2765102.6412239866, -2718632.647198386, -2850986.0829882915, -2783247.5996297337, -2770678.8929780237, -2861678.9778222367, -2857956.7453596327, -2837234.7797959587, -2883203.493396784, -2887070.449611204, -2850846.9170082067, -2882207.803292423, -2960139.9480205523, -2926885.463164659, -2969379.04372346, -2900593.5878696945, -2981886.3181765876, -2968845.226806122, -2939708.272913402, -3009631.399674797, -2978509.786621308, -3035896.8581879283, -3040560.126575405, -3009348.6495252238, -3005335.1804510783, -2987709.226269268]
bic_7pcw_5 = [517282.4992201098, 517282.4992201098, 517282.4992201098, -567155.1035975176, -444252.2066607724, -600503.343630735, -1377914.4735406346, -1185411.0530305416, -930628.651359619, -1805265.7913572805, -1797308.7787867088, -1521453.9284565486, -1921207.061822034, -1746904.5976962065, -1877566.9779949181, -2114781.1712839003, -2335483.4476216426, -2294962.744243642, -2298765.172111568, -2399987.536542324, -2236290.1771178558, -2485135.0242226007, -2424849.183568449, -2372820.209168607, -2531676.767489568, -2554506.2765799905, -2550584.5283024693, -2584439.3364560693, -2547452.7236180324, -2560594.452610864, -2620479.477018336, -2570664.937781241, -2505570.363040214, -2616540.653958175, -2561544.4147108523, -2662581.786176395, -2636733.0688766222, -2598144.7602248276, -2648597.563046685, -2600006.9699441604, -2671908.8778968616, -2642459.1912417645, -2711744.192528966, -2707530.53335275, -2725243.783565095, -2759651.8991283523, -2675976.356946524, -2698711.647084861, -2759111.508454081, -2756089.1279615364, -2760580.8055430725, -2794726.272910413, -2789678.4133674772, -2818458.997299801, -2842547.790920373, -2767293.3219801844, -2837444.9129950595, -2763279.8191134753, -2766958.041732387, -2811794.1768210097, -2893221.760907583, -2919786.1971802297, -2861358.2091438007, -2860366.771846796, -2846012.733014876, -2921644.3871027483, -2847865.646616112, -2921989.816542669, -2950819.0097402562, -2881071.805010057, -2858288.3206323544, -2946736.258574283, -2904282.2503162166, -2905533.040163928, -2954124.163175478, -2937190.1651434842, -2997157.263274964, -2946783.4244365618, -2939207.554555162, -3022762.0374034294, -2974799.468330463, -2936911.435300625, -2933443.827415117, -2934759.690351347, -2981649.6573574813, -2939567.4824303216, -2988874.120695459, -2981097.475079547, -2910397.333980245, -2971841.20147464, -3027583.2351795835, -2995373.6535634426, -3002334.660673502, -3011335.8388427966, -2979740.816336107, -3011483.1025426956, -3006335.650401243, -3035080.289974189, -3040164.976712264, -3024509.91569184, -3054554.306667481, -2990825.104343776, -3005218.881172491, -3057160.9668339733, -3052087.416374592, -3068255.8418789874, -3037937.995389705, -3012432.867508956, -3064513.451885259, -3087958.584339441, -3024984.1951246676, -3086963.6438539773, -3027148.328186619, -3034769.6060852874, -3011995.4604918933, -3060766.394936502, -3048086.467401809, -3040437.451261908, -3048409.798739752, -3063752.4904875597, -3072291.3985399115, -3044644.7890444826, -3081072.016016895, -3082680.4106354774, -3022204.9063948677, -3030787.6401674296, -3052250.4426729213, -3044087.6187607204, -3061984.5390072637, -3106772.8708733125, -3053783.234769981, -3062783.4080494135, -3097173.8775872826, -3072265.012894905, -3091237.52270868, -3092247.6802128283, -3031350.0005333815, -3102652.6571308994, -3115840.3286397476, -3089036.485815403, -3110902.358661207, -3104558.5995609784, -3111748.9516977887, -3030763.4296675534, -3103260.8617170835, -3109464.677316062, -3061211.9411822716, -3112479.059287494, -3064175.1273851735, -3121522.277477384]
bic_7pcw_10 = [866283.9994066465, 866283.9994066465, 866283.9994066465, -189122.2275883517, -155833.17093607428, 5972.058842205708, -568885.9546976176, -568885.9546976176, -829466.330281893, -848685.588437718, -1380618.6766916623, -1458090.1356876364, -1604013.892022307, -1678171.1650223976, -1776194.428693838, -1969422.0254717441, -1994964.7855840244, -1957701.7828376675, -2171381.953322077, -2171381.9533131383, -2171381.9214466764, -2224669.3704794757, -2162581.130608858, -2141935.2523033144, -2215697.646547377, -2249309.7629546225, -2234055.0079500056, -2248997.4168176604, -2208828.9175036256, -2329068.4426193777, -2271741.866384003, -2352642.9764160253, -2289782.908415048, -2417710.8141439315, -2427433.2452524537, -2234165.067924644, -2442633.238975985, -2450179.5423031505, -2459488.1664491887, -2468738.7690263744, -2468738.8042871635, -2449130.3641242897, -2451527.91257479, -2478130.4612920173, -2497058.374653337, -2518008.6519491198, -2562104.928031777, -2508959.2042133487, -2563720.107812519, -2607219.6922449386, -2578542.3445662726, -2533469.171114625, -2562459.708122641, -2590049.8761610473, -2536307.683299426, -2623840.998362503, -2605579.16854831, -2627869.9768693675, -2609157.393701656, -2563043.2709702216, -2567975.2982021472, -2609330.574541401, -2617907.6672468637, -2658538.1478313436, -2660583.476902536, -2664521.5859644753, -2640611.8759809574, -2665755.3005714244, -2629461.0294916183, -2678148.1047825124, -2661830.9915207294, -2649468.0407061838, -2708042.59394396, -2759245.032096001, -2705235.3030896136, -2700128.037683686, -2742262.208521876, -2682083.4583727065, -2814829.234690465, -2708767.293857502, -2724013.078860935, -2691400.752241933, -2735370.2711642403, -2702920.1085877805, -2770803.8980648257, -2704029.978577031, -2763138.473787082, -2783570.053274493, -2762566.0559817, -2755300.8399054087, -2753915.0004343446, -2756979.11445074, -2788186.737289041, -2763115.4670932554, -2707888.7388501693, -2740110.251712346, -2793764.4173672763, -2771087.6003406285, -2719151.2525365413, -2805695.7057088986, -2771392.4825337743, -2825524.371027068, -2805640.370864151, -2765984.459424986, -2806977.898540991, -2811493.61973542, -2778778.888141898, -2801909.146741939, -2781514.5270658014, -2861371.471910379, -2760597.7168792947, -2829981.173685386, -2845909.550171046, -2816768.7800077414, -2862501.9012126853, -2826836.9814209198, -2784526.015358995, -2850570.173917602, -2853858.64882678, -2811490.6104620798, -2833082.076089628, -2792958.6377479183, -2842997.2632379043, -2798385.7068952885, -2881351.514983837, -2844054.851294583, -2825337.7427423163, -2816264.4405971207, -2863004.436233976, -2857208.303942648, -2853707.7359698983, -2857469.5402572514, -2877958.0234019603, -2851035.7853366933, -2818368.5274311733, -2862890.1497569936, -2888428.9969026768, -2820413.022273255, -2884411.567067256, -2899080.035551732, -2859171.3895844566, -2821531.9956533494, -2861040.0677885013, -2841452.948199009, -2919513.416124198, -2865461.1408877345, -2879848.191153994, -2861974.699198494, -2867521.8078174377, -2832419.191851357]

bic_5pcw_3 = [564430.2459215831, 564430.2459215831, 564430.2459215831, -2258234.676210458, -1043226.1910698252, -1356214.616235703, -3713523.293100948, -3689638.109582788, -3108798.0962220235, -4794109.7666412145, -4729309.721707751, -4613246.493460199, -5399081.931441846, -4585145.601483295, -4878154.614160956, -5000622.133147689, -5653810.554164037, -6045445.49898058, -6116304.509672142, -6303757.064082001, -6145828.181834087, -6354811.414610069, -6668883.110572856, -6691525.7685946785, -6270806.901607515, -6746561.132974331, -6724013.146671252, -6892462.158284813, -6631794.442825, -6674463.528431844, -7017697.739107957, -6925616.977112025, -7156182.668051288, -7121099.356564537, -6833330.189509098, -7140649.555371509, -7172713.421378019, -7323768.685116774, -7119776.380914041, -7145083.684689467, -7150036.456439319, -7185519.414478365, -7360073.8646090645, -7382080.260063917, -7319488.640385566, -7250925.220179772, -7383604.629105479, -7465611.143694721, -7450972.841300832, -7257168.8742399495, -7406983.005488015, -7565602.002122847, -7391563.976603657, -7480846.747572523, -7471760.533057329, -7664803.555651007, -7705715.6745544365, -7646329.919273627, -7569376.633612622, -7711852.088901331]
bic_5pcw_5 = [1313979.8903327975, 1313979.8903327975, 1313979.8903327975, -1937019.6862735376, -1442047.2007494413, -1583084.388021666, -3536958.2037145724, -1994960.3834880479, -3437900.859683993, -3947513.5136040715, -4220368.4420871, -3698879.288746445, -4743944.4640877675, -4739503.725867895, -4405894.911969176, -4658831.354154428, -5003383.166471002, -5290274.077126864, -5694676.937383827, -5671382.863415972, -5369232.662785889, -5560010.19493157, -5990322.483728247, -6077467.7647225475, -6178520.819527463, -5930144.67133282, -6162429.170444072, -6206322.186961511, -6053568.063777645, -6482084.008347086, -6469559.754360293, -6388786.993029044, -6464451.809748015, -6700876.026901481, -6625049.421779347, -6405930.679336341, -6452639.10085428, -6778422.807795081, -6801326.0478983885, -6698843.472507861, -6586957.385725967, -6684453.389743864, -6777406.384754203, -6784313.620810838, -6713526.603844887, -6830724.458336301, -6898531.239134485, -6913784.133260759, -6874078.455927916, -6805473.727020661, -6835210.7273137625, -6997638.193571886, -6990957.180256842, -7090130.803003924, -7110873.663301508, -7162972.438014754, -7052358.21741703, -7053104.625144012, -7168027.104961704, -7167715.285911234, -7118158.094387324, -7169465.439977161, -7195332.33031202, -7224678.128630594, -7139208.958112869, -7098490.377247314, -7258823.636194092, -7217414.184505948, -7292540.963572608, -7215567.681686672, -7303260.146076647, -7296559.395656235, -7312444.55805631, -7410051.420062336, -7269124.74135184, -7465396.478809359, -7282418.250408452, -7443860.215438532, -7470853.3634567205, -7504089.628933062, -7525674.211915197, -7341685.17653729, -7439360.742528589, -7417072.010027648, -7480649.082087737, -7522432.482286155, -7558541.776394799, -7621788.666409824, -7530090.580436976, -7496797.817128535, -7553046.826413357, -7534905.142980391, -7642551.860725469, -7514557.843019654, -7592939.136343081, -7517967.244818285, -7604311.18526141, -7542826.664709041, -7648534.950966685, -7583639.692347135, -7639373.664550613, -7477412.756234653, -7567949.439722901, -7526926.872151667, -7707806.65481185, -7771540.540572925, -7587083.7881633835, -7670883.417818924, -7732543.963289178, -7646987.9346994255, -7667160.240499495, -7615636.260223156, -7686404.874166648, -7698523.528526737, -7743121.777671411, -7816367.569034995, -7696375.921541896, -7758007.212580084, -7662521.333061067, -7660356.698989045, -7780228.616926773, -7790185.99728538, -7757756.192073253, -7706582.591491959, -7715241.440120239, -7905083.317181016, -7706616.096235476, -7741488.024689752, -7817706.724434371, -7846506.763610213, -7821738.481661896, -7791494.866906655, -7876758.633076757, -7701106.916481145, -7666314.042539749, -7766994.512149446, -7775470.593756253, -7731955.553687291, -7709096.388287242, -7876424.321349202, -7729003.342457267, -7846052.824540964, -7797385.7626063535, -7831497.825222165, -7856717.570644051, -7830928.946485248, -7688057.435364232, -7807546.7575702155, -7792732.362156475, -7944094.047937266]
bic_5pcw_10 = [2326895.9800330927, 2326895.9800330927, 2326895.9800330927, -103890.33777007586, -453166.6586061415, -757144.0322257375, -1534174.9896877164, -1469354.8389328783, -2273667.865673885, -3333926.6637027003, -3083455.4103326206, -3389511.0182309654, -4056596.685563885, -3906244.786546262, -4199302.518290584, -3742166.2294917125, -4440332.54123323, -4454702.576429746, -4547380.896092389, -4968794.327770612, -4086338.1934667593, -5190024.311926085, -5091566.50776027, -5019499.5124806315, -5470324.151891005, -5064975.550354435, -5408896.76373758, -5232684.519506422, -5446012.321114044, -5263622.736049846, -5607422.483528339, -5685321.644304184, -5561204.907513449, -5665212.526812038, -5654861.929872681, -5735736.234724064, -5828287.908355057, -5846910.532886659, -5640084.375378122, -5810250.713655301, -5982217.948411, -5926512.519366519, -5762425.313942174, -6272808.758650626, -6065690.658987555, -5975012.2983767055, -6097523.358931423, -6009397.773014349, -6100531.82444325, -6138256.347452744, -6015734.855742297, -6304508.717434279, -6252834.98390571, -6360990.030773663, -6382907.532946893, -6369095.712925281, -6170232.2255010065, -6431923.438645553, -6232028.175717746, -6191053.903752818, -6333507.437031052, -6236326.745449883, -6329955.649734198, -6490039.190589925, -6475563.976347638, -6468322.794335354, -6546177.815712142, -6508790.872081923, -6580806.527554977, -6498024.717835513, -6580023.887578237, -6488957.993886369, -6538969.00807556, -6733024.506406031, -6572976.87701102, -6647648.482631629, -6657121.127943325, -6494357.268782695, -6630840.381322984, -6479058.461793257, -6590534.043444039, -6744131.323406726, -6601917.672727067, -6680766.07057028, -6738889.548176662, -6788574.705367486, -6779234.916428745, -6780909.724778648, -6588032.8520736145, -6653777.065497836, -6782041.385247385, -6770867.328880239, -6880486.761107964, -6823214.594383567, -6852398.639396085, -6793193.8031922765, -6887147.522982665, -6816781.726601112, -6903893.793202662, -6804844.471389301, -6859861.2250363, -6863101.707297235, -6818105.624464092, -6965655.172980116, -6968366.839734768, -6827869.277812607, -6964173.749018518, -6951671.971243342, -6907280.422529927, -6946503.4451149395, -6862119.360981313, -6896895.188390435, -6950929.457464077, -6912423.07416716, -6917348.043523443, -6993247.1944354735, -6937624.894267169, -7044761.225153736, -6943189.223112137, -6933696.6619231235, -7020015.086202155, -6954587.030445964, -7043066.639255451, -7057306.974251882, -7039359.440737488, -6899035.892503776, -7011295.377175718, -6921228.628861468, -7045690.575305436, -6931815.860081979, -6975800.513790016, -7023270.558349023, -7039930.5028172005, -6931464.477668606, -7100498.243428864, -7015420.7752729235, -7001013.667154314, -7113792.78355039, -7149976.9845459275, -7085501.227239058, -7078401.250010129, -7078266.422821985, -7135009.399480429, -7075161.918215209, -7107307.148227878, -7107683.1149534015, -7120042.0126334075, -7042939.579585352, -7153263.551693128, -7071261.898885388]

## Plot BIC scores. Average over triplicates.
bic_5pcw = np.array(bic_5pcw_5)
bic_5pcw = bic_5pcw.reshape(-1,3).mean(axis=1)
bic_5pcw_gradient = [bic_5pcw[i]-bic_5pcw[i-1] for i in range(1,20)]

bic_7pcw = np.array(bic_7pcw_5)
bic_7pcw = bic_7pcw.reshape(-1,3).mean(axis=1)
bic_7pcw_gradient = [bic_7pcw[i]-bic_7pcw[i-1] for i in range(1,30)]

x_bic = [i for i in range(50)]

df_bic_5pcw = pd.DataFrame({'No. of Components' : x_bic, '5pcw' : bic_5pcw})
df_bic_7pcw = pd.DataFrame({'No. of Components' : x_bic, '7pcw' : bic_7pcw})

sns.lineplot(x='No. of Components', y='5pcw', data=df_bic_5pcw)
sns.lineplot(x='No. of Components', y='7pcw', data=df_bic_7pcw)
plt.title('BIC score gradients for GMM', fontsize=14)
plt.ylabel('BIC score gradient')
plt.xlabel('No. of Clusters')
plt.legend(['5pcw','7pcw'])

## Construct GMM fit according to deemed best fit best fit.
GMM = GaussianMixture(n_components = 26, random_state=0)

labelsGMM = GMM.fit_predict(windows2[sum_cols].values)

centers = np.empty(shape=(GMM.n_components, windows2[sum_cols].values.shape[1]))
for i in range(GMM.n_components):
    density = scipy.stats.multivariate_normal(cov=GMM.covariances_[i], mean=GMM.means_[i]).logpdf(windows2[sum_cols].values)
    centers[i, :] = windows2[sum_cols].values[np.argmax(density)]

k_centroids[26] = centers
cells['Neighborhoods'] = labelsGMM
cells['Neighborhoods'] = cells['Neighborhoods'].astype('category')

# Specify cell order.
cell_order = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]#,17,18,19,20,21,22,23]

## Plot cell-type enrichment heatmaps.
k_to_plot = 26
niche_clusters = (k_centroids[k_to_plot])
tissue_avgs = values.mean(axis = 0)
fc = np.log2(((niche_clusters+tissue_avgs)/(niche_clusters+tissue_avgs).sum(axis = 1, keepdims = True))/tissue_avgs)
fc = pd.DataFrame(fc,columns = sum_cols)
s=sns.clustermap(fc.loc[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],cell_order], vmin =-3,vmax = 3,cmap = 'RdBu_r', row_cluster = False,col_cluster=False,linewidths=1,linecolor="grey",figsize=(2.8,4))

## Specify color palette according to neighborhood size. Color codes retrieved from basic color palette in Seurat.
color_palette = ['#F8766D','#E68613','#CD9600','#ABA300',
                 '#7CAE00','#0CB702','#00BE67','#00C19A',
                 '#00BFC4','#00B8E7','#00A9FF','#8494FF',
                 '#C77CFF','#ED68ED','#FF61CC','#FF68A1']

color_palette = ['#F8766D','#EC823C','#DD8D00','#CA9700','#B3A000',
                 '#97A900','#71B000','#2FB600','#00BB4B','#00BF76',
                 '#00C098','#00C0B7','#00BDD1','#00B7E8','#00AEFA',
                 '#3DA1FF','#8F91FF','#BE80FF','#DE71F9','#F265E7',
                 '#FE61CF','#FF64B3','#FF6C92']

color_palette = ['#F8766D','#EE8043','#E18A00','#D19300','#BE9C00','#A8A400',
                 '#8CAB00','#68B100','#24B700','#00BB49','#00BE70','#00C090',
                 '#00C1AB','#00BFC4','#00BBDA','#00B5ED','#00ACFC','#42A0FF',
                 '#8B93FF','#B684FF','#D575FE','#EB69F0','#F962DD','#FF61C6',
                 '#FF65AC','#FF6D8E']

## Plot neighborhood spatial maps.
cells['Neighborhoods'] = cells['Neighborhoods'].astype('category')
cells['cluster'] = cells['cluster'].astype('category')
ax = sns.lmplot(data = cells,x = 'x',y='y',hue = 'Neighborhoods',palette = color_palette,height = 6, aspect=1,col = reg,col_wrap = None,fit_reg = False,scatter_kws={"s": 0.05}, size=6) #.set(title="Fetal Heart 5 pcw Neighborhoods")
plt.ylim(reversed(plt.ylim()))
plt.title('5 pcw Neighborhoods', fontsize=20)
plt.setp(ax._legend.get_title(), fontsize=0)
plt.setp(ax._legend.get_texts(), fontsize=10)
for lh in ax._legend.legendHandles: 
    lh.set_alpha(1)
    lh._sizes = [100] 







